@model CumlativePart1.Models.Student

<div id="containershow">
    <nav>
        <a class="navlink" href="/StudentPage/Show/@Model.StudentId">Back</a>
    </nav>
    <h2>Update Student</h2>
    <form method="POST" action="/StudentPage/Update/@Model.StudentId" id="studentForm">
        <div class="inputrow">
            <label for="StudentFname">First Name:</label>
            <input type="text" id="StudentFname" name="StudentFname" value="@Model.StudentFName" />
            <span id="fnameError" class="error-message hidden">First Name cannot be empty.</span>
        </div>
        <div class="inputrow">
            <label for="StudentLname">Last Name:</label>
            <input type="text" id="StudentLname" name="StudentLname" value="@Model.StudentLName" />
            <span id="lnameError" class="error-message hidden">Last Name cannot be empty.</span>
        </div>
        <div class="inputrow">
            <label for="EnrollDate">Enrollment Date:</label>
            <input type="date" id="EnrollDate" name="EnrollDate" value="@Model.EnrollDate.ToString("yyyy-MM-dd")" />
            <span id="enrollDateError" class="error-message hidden">Enrollment Date cannot be in the future.</span>
        </div>
        <div class="inputrow">
            <label for="StudentNumber">Student Number:</label>
            <input type="text" id="StudentNumber" name="StudentNumber" value="@Model.StudentNumber" />
        </div>
        <div class="inputrow">
            <input type="submit" value="Update Student" class="submit-btn" />
        </div>
    </form>
</div>

<script>
    document.getElementById('studentForm').addEventListener('submit', function (event) {
        const validateField = (fieldId, errorId, condition) => {
            const errorElement = document.getElementById(errorId);
            if (condition) {
                errorElement.classList.remove('hidden');
                return false;
            } else {
                errorElement.classList.add('hidden');
                return true;
            }
        };

        const studentFname = document.getElementById('StudentFname').value.trim();
        const studentLname = document.getElementById('StudentLname').value.trim();
        const enrollDate = document.getElementById('EnrollDate').value;
        const today = new Date().toISOString().split('T')[0];

        let isValid = true;

        isValid &= validateField('StudentFname', 'fnameError', !studentFname);
        isValid &= validateField('StudentLname', 'lnameError', !studentLname);
        isValid &= validateField('EnrollDate', 'enrollDateError', enrollDate > today);

        if (!isValid) {
            event.preventDefault();
        }
    });
</script>

<style>
    .error-message {
        color: red;
        font-size: 0.9em;
        margin-left: 10px;
    }

        .error-message.hidden {
            display: none;
        }

    .inputrow {
        margin-bottom: 15px;
    }

    .submit-btn {
        background-color: #007bff;
        color: white;
        padding: 10px 15px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

        .submit-btn:hover {
            background-color: #0056b3;
        }
</style>


<